apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: full-release
spec:
  entrypoint: sync-and-process
  arguments:
    parameters:
      - name: database-name
        description: "Milvus database name to use"
      - name: collection-name
        description: "Milvus collection name to create"
  volumes:
    - name: rclone
      secret:
        secretName: rclone-s3-config
    - name: workspace
      persistentVolumeClaim:
        claimName: full-release-pvc
    - name: env-config
      configMap:
        name: full-release-config
  templates:
    - name: sync-and-process
      steps:
        - - name: prepare
            template: prepare
        - - name: sync-files
            template: sync-files
            arguments:
              parameters:
                - name: log-timestamp
                  value: "{{steps.prepare.outputs.parameters.log-timestamp}}"
        - - name: insert-data
            template: insert-data
            arguments:
              parameters:
                - name: database-name
                  value: "{{workflow.parameters.database-name}}"
                - name: collection-name
                  value: "{{workflow.parameters.collection-name}}"
                - name: log-timestamp
                  value: "{{steps.prepare.outputs.parameters.log-timestamp}}"

    - name: prepare
      outputs:
        parameters:
          - name: log-timestamp
            valueFrom:
              path: /tmp/log-timestamp.txt
      container:
        image: registry.cn-hangzhou.aliyuncs.com/t9k/alpine:argo-3.21.3
        command: [sh, -c]
        args:
          - |
            set -e

            # Create logs directory
            mkdir -p /workspace/logs

            # Generate timestamp for log filename
            TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
            echo -n "${TIMESTAMP}" > /tmp/log-timestamp.txt
            LOG_DIR="/workspace/logs/full-release_${TIMESTAMP}"
            mkdir -p "$LOG_DIR"
            LOG_FILE="$LOG_DIR/log.txt"
            
            # Start logging
            exec > >(tee -a "${LOG_FILE}") 2>&1
            echo "=== Starting full-release workflow at $(date) ==="
            echo "=== Preparing workspace ==="

            # Validate database and collection names
            DATABASE_NAME="{{workflow.parameters.database-name}}"
            if ! [[ $DATABASE_NAME =~ ^[a-zA-Z0-9_]+$ ]]; then
              echo "Error: Database name '$DATABASE_NAME' is invalid. Database names can only contain numbers, letters, and underscores."
              exit 1
            fi

            COLLECTION_NAME="{{workflow.parameters.collection-name}}"
            if ! [[ $COLLECTION_NAME =~ ^[a-zA-Z0-9_]+$ ]]; then
              echo "Error: Collection name '$COLLECTION_NAME' is invalid. Collection names can only contain numbers, letters, and underscores."
              exit 1
            fi

            echo "Database name: $DATABASE_NAME"
            echo "Collection name: $COLLECTION_NAME"

            git clone https://github.com/t9k/knowledge-base-examples.git /tmp/repo
            mkdir -p /workspace/scripts
            cp /tmp/repo/argo-workflows/full-release/*.sh /workspace/scripts/
            cp /tmp/repo/argo-workflows/full-release/*.py /workspace/scripts/
            
            echo "=== Prepare step completed at $(date) ==="
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: sync-files
      inputs:
        parameters:
          - name: log-timestamp
      container:
        image: registry.cn-hangzhou.aliyuncs.com/t9k/alpine:argo-3.21.3
        command: [sh, -c]
        args:
          - |
            set -e
            LOG_DIR="/workspace/logs/full-release_{{inputs.parameters.log-timestamp}}"
            LOG_FILE="$LOG_DIR/log.txt"
            mkdir -p "$LOG_DIR"
            exec > >(tee -a "${LOG_FILE}") 2>&1
            echo "=== Starting sync-files step at $(date) ==="
            
            chmod +x /workspace/scripts/sync-files.sh
            /workspace/scripts/sync-files.sh
            
            echo "=== Sync-files step completed at $(date) ==="
        volumeMounts:
          - name: rclone
            mountPath: /s3cfg
          - name: workspace
            mountPath: /workspace
          - name: env-config
            mountPath: /env-config

    - name: insert-data
      inputs:
        parameters:
          - name: database-name
          - name: collection-name
          - name: log-timestamp
      container:
        image: registry.cn-hangzhou.aliyuncs.com/t9k/python:3.10-milvus
        command: [/bin/bash, -c]
        args:
          - |
            set -e
            LOG_DIR="/workspace/logs/full-release_{{inputs.parameters.log-timestamp}}"
            LOG_FILE="$LOG_DIR/log.txt"
            mkdir -p "$LOG_DIR"
            exec > >(tee -a "${LOG_FILE}") 2>&1
            echo "=== Starting insert-data step at $(date) ==="
            
            chmod +x /workspace/scripts/insert-data.py
            export DATABASE_NAME="{{inputs.parameters.database-name}}"
            export COLLECTION_NAME="{{inputs.parameters.collection-name}}"
            export LOG_FILE="${LOG_FILE}"
            export LOG_DIR="${LOG_DIR}"
            /workspace/scripts/insert-data.py
            
            echo "=== Insert-data step completed at $(date) ==="
            echo "=== Workflow completed successfully at $(date) ==="
        volumeMounts:
          - name: workspace
            mountPath: /workspace
          - name: env-config
            mountPath: /env-config
